/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
        macros {
                ZMK_MACRO(alt_comma,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LALT>
                        , <&macro_tap &kp KP_N4 &kp KP_N4>
                        , <&macro_release &kp LALT>;
                )
                ZMK_MACRO(rus_number,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LALT>
                        , <&macro_tap &kp KP_N2 &kp KP_N5 &kp KP_N2>
                        , <&macro_release &kp LALT>;
                )
                ZMK_MACRO(m_en,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LALT &kp LSHFT>
                        , <&macro_tap &kp N1>
                        , <&macro_release &kp LALT &kp LSHFT>;
                )
                ZMK_MACRO(m_ru,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LALT &kp LSHFT>
                        , <&macro_tap &kp N2>
                        , <&macro_release &kp LALT &kp LSHFT>;
                )
                ZMK_MACRO(m_c_left,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp LEFT>
                        , <&macro_release &kp LCTRL>;
                )
                ZMK_MACRO(m_c_right,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp RIGHT>
                        , <&macro_release &kp LCTRL>;
                )
                ZMK_MACRO(m_cs_left,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LCTRL &kp LSHFT>
                        , <&macro_tap &kp LEFT>
                        , <&macro_release &kp LCTRL>;
                )
                ZMK_MACRO(m_cs_right,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LCTRL &kp LSHFT>
                        , <&macro_tap &kp RIGHT>
                        , <&macro_release &kp LCTRL>;
                )
                ZMK_MACRO(m_ctrl_z,
                        wait-ms = <20>;
                        tap-ms = <20>;
                        bindings = <&macro_press &kp LCTRL>
                        , <&macro_tap &kp Z>
                        , <&macro_release &kp LCTRL>;
                )
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
  &none   &mt LALT  RBKT     &kp Q   &kp W   &kp E         &kp R             &kp T         &kp Y         &kp U            &kp I         &kp O     &kp P       &kp LBKT        &none
          &mt LCTRL GRAVE    &kp A   &kp S   &kp D         &kp F             &kp G         &kp H         &kp J            &kp K         &kp L     &kp SEMI    &mt RCTRL SQT
          &mt LGUI  MINUS    &kp Z   &kp X   &kp C         &kp V             &kp B         &kp N         &kp M            &kp COMMA     &kp DOT   &kp KP_DOT  &alt_comma
                                             &lt RSE TAB   &mt LSHFT SPACE   &lt LWR RET   &lt LWR ESC   &mt RSHFT BSPC   &lt RSE DEL
                        >;
                };
                lower_layer {
                        bindings = <
  &none   &mt LALT PERCENT  &kp SLASH  &kp AT     &kp MINUS      &kp PLUS      &kp LBRC     &kp RBRC   &kp N7     &kp N8        &kp N9     &kp BSLH   &kp DQT           &none
          &mt LCTRL PIPE    &kp ASTRK  &kp EXCL   &kp UNDER      &kp EQUAL     &kp LPAR     &kp RPAR   &kp N4     &kp N5        &kp N6     &kp SEMI   &kp COLON
          &mt LGUI CARET    &kp AMPS   &kp QMARK  &m_ru          &m_en         &kp LT       &kp GT     &kp N1     &kp N2        &kp N3     &kp N0     &kp APOSTROPHE
                                                  &lt ADJ TAB    &trans        &trans       &trans     &trans     &lt ADJ DEL
                        >;
                };

                raise_layer {
                        bindings = <
  &none   &kp DOLLAR  &rus_number  &kp F7   &kp F8   &kp F9   &kp F12      &kp C_VOL_UP   &m_cs_left  &kp UP       &m_cs_right  &kp PG_UP   &kp INS     &none
          &m_ctrl_z   &kp HASH     &kp F4   &kp F5   &kp F6   &kp F11      &kp HOME       &kp LEFT    &kp DOWN     &kp RIGHT    &kp END     &kp K_APP
          &kp LSHFT   &kp F13      &kp F1   &kp F2   &kp F3   &kp F10      &kp C_VOL_DN   &m_c_left   &kp PSCRN    &m_c_right   &kp PG_DN   &kp RSHFT
                                            ]&trans   &trans   &lt ADJ RET  &lt ADJ ESC    &trans      &trans
                        >;
                };
                adjust_layer {
                        bindings = <
  &none   &bootloader   &none          &none          &none          &none          &kp CAPS       &kp KP_NUM     &kp SLCK       &none          &none          &none          &bootloader   &none
          &bt BT_CLR    &bt BT_SEL 4   &bt BT_SEL 2   &bt BT_SEL 2   &bt BT_SEL 1   &bt BT_SEL 0   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_CLR
          &reset        &none          &none          &none          &none          &none          &none          &none          &none          &none          &none          &reset
                                                      &trans         &none          &trans         &none          &trans         &trans
                        >;
                };
        };
};
